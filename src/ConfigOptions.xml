<?xml version="1.0" encoding="utf-8"?>
<Options>
  <Option Id="AccessibilityModifiers">
    <Description>Prefer explicit/implicit accessibility modifiers</Description>
    <Values>
      <Value>explicit</Value>
      <Value>implicit</Value>
    </Values>
  </Option>
  <Option Id="AccessorBracesStyle">
    <Description>Format accessor's braces on single line or multiple lines</Description>
    <Values>
      <Value IsDefault="true">multi_line</Value>
      <Value>single_line_when_expression_is_on_single_line</Value>
    </Values>
  </Option>
  <Option Id="ArrayCreationTypeStyle">
    <Description>Prefer explicitly/implicitly typed array</Description>
    <Values>
      <Value>explicit</Value>
      <Value>implicit</Value>
      <Value>implicit_when_type_is_obvious</Value>
    </Values>
  </Option>
  <Option Id="ArrowTokenNewLine">
    <Description>Place new line after/before arrow token</Description>
    <Values>
      <Value>after</Value>
      <Value>before</Value>
    </Values>
  </Option>
  <Option Id="BinaryOperatorNewLine">
    <Description>Place new line after/before binary operator</Description>
    <Values>
      <Value>after</Value>
      <Value>before</Value>
    </Values>
  </Option>
  <Option Id="BlankLineBetweenClosingBraceAndSwitchSection">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Add/remove blank line between closing brace and switch section</Description>
  </Option>
  <Option Id="BlankLineBetweenSingleLineAccessors">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Add/remove blank line between single-line accessors</Description>
  </Option>
  <Option Id="BlankLineBetweenUsingDirectives">
    <Description>Add/remove blank line between using directives</Description>
    <Values>
      <Value>never</Value>
      <Value>separate_groups</Value>
    </Values>
  </Option>
  <Option Id="BlockBracesStyle">
    <Description>Format block's braces on single line or multiple lines</Description>
    <Values>
      <Value IsDefault="true">multi_line</Value>
      <Value>single_line_when_empty</Value>
    </Values>
  </Option>
  <Option Id="BodyStyle">
    <Description>Prefer block body or expression body</Description>
    <Values>
      <Value>block</Value>
      <Value>expression</Value>
    </Values>
  </Option>
  <Option Id="ConditionalOperatorConditionParenthesesStyle">
    <Description>Add/remove parentheses to/from condition in conditional operator</Description>
    <Values>
      <Value>include</Value>
      <Value>omit</Value>
      <Value>omit_when_condition_is_single_token</Value>
    </Values>
  </Option>
  <Option Id="ConditionalOperatorNewLine">
    <Description>Place new line after/before '?:' operator</Description>
    <Values>
      <Value>after</Value>
      <Value>before</Value>
    </Values>
  </Option>
  <Option Id="ConfigureAwait">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Add/remove 'ConfigureAwait(false)' call</Description>
  </Option>
  <Option Id="DocCommentSummaryStyle">
    <Description>Format documentation comment summary on single line or multiple lines</Description>
    <Values>
      <Value>multi_line</Value>
      <Value>single_line</Value>
    </Values>
  </Option>
  <Option Id="EmptyStringStyle">
    <Description>Prefer 'string.Empty' or empty string literal</Description>
    <Values>
      <Value>field</Value>
      <Value>literal</Value>
    </Values>
  </Option>
  <Option Id="EnumFlagValueStyle">
    <Description>Format enum flag value as decimal number or as a shift operator</Description>
    <Values>
      <Value>decimal_number</Value>
      <Value>shift_operator</Value>
    </Values>
  </Option>
  <Option Id="EnumHasFlagStyle">
    <Description>Use 'HasFlag' method or bitwise operator</Description>
    <Values>
      <Value>method</Value>
      <Value>operator</Value>
    </Values>
  </Option>
  <Option Id="EqualsTokenNewLine">
    <Description>Place new line after/before equals sign</Description>
    <Values>
      <Value>after</Value>
      <Value>before</Value>
    </Values>
  </Option>
  <Option Id="MaxLineLength">
    <DefaultValue>140</DefaultValue>
    <ValuePlaceholder>&lt;NUM&gt;</ValuePlaceholder>
    <Description>Maximum line length</Description>
  </Option>
  <Option Id="TabLength">
    <DefaultValue>4</DefaultValue>
    <ValuePlaceholder>&lt;NUM&gt;</ValuePlaceholder>
    <Description>A number of spaces that are equivalent to a tab character</Description>
  </Option>
  <Option Id="NewLineAtEndOfFile">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Include/omit new line at the end of a file</Description>
  </Option>
  <Option Id="NewLineBeforeWhileInDoStatement">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Include/omit new line before 'while' in 'do' statement</Description>
  </Option>
  <Option Id="NullCheckStyle">
    <Description>Use equality operator or pattern matching as a null check</Description>
    <Values>
      <Value>equality_operator</Value>
      <Value>pattern_matching</Value>
    </Values>
  </Option>
  <Option Id="NullConditionalOperatorNewLine">
    <Description>Place new line after/before null-conditional operator</Description>
    <Values>
      <Value>after</Value>
      <Value>before</Value>
    </Values>
  </Option>
  <Option Id="ObjectCreationParenthesesStyle">
    <Description>Include/omit parentheses when creating new object</Description>
    <Values>
      <Value>include</Value>
      <Value>omit</Value>
    </Values>
  </Option>
  <Option Id="ObjectCreationTypeStyle">
    <Description>Prefer explicit/implicit object creation</Description>
    <Values>
      <Value>explicit</Value>
      <Value>implicit</Value>
      <Value>implicit_when_type_is_obvious</Value>
    </Values>
  </Option>
  <Option Id="PrefixFieldIdentifierWithUnderscore">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Prefix field identifier with underscore</Description>
  </Option>
  <Option Id="SuppressUnityScriptMethods" IsObsolete="true">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>[deprecated] This option is obsolete, use option 'roslynator_unity_code_analysis.enabled' instead.</Description>
  </Option>
  <Option Id="UnityCodeAnalysisEnabled">
    <Key>unity_code_analysis.enabled</Key>
    <ValuePlaceholder>true|false</ValuePlaceholder> 
    <Description>Enable code analysis to detect Unity-specific code</Description>
  </Option>
  <Option Id="UseAnonymousFunctionOrMethodGroup">
    <Description>Use anonymous function or method group</Description>
    <Values>
      <Value>anonymous_function</Value>
      <Value>method_group</Value>
    </Values>
  </Option>
  <Option Id="UseBlockBodyWhenDeclarationSpansOverMultipleLines">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Use block body when declaration spans over multiple lines</Description>
  </Option>
  <Option Id="UseBlockBodyWhenExpressionSpansOverMultipleLines">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Use block body when expression spans over multiple lines</Description>
  </Option>
  <Option Id="UseVarInsteadOfImplicitObjectCreation">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Use 'var' instead of implicit object creation</Description>
  </Option>
  <Option Id="InfiniteLoopStyle">
    <Values>
      <Value>for</Value>
      <Value>while</Value>
    </Values>
    <Description>Use 'for'/'while' statement as an infinite loop</Description>
  </Option>
  <Option Id="BlankLineAfterFileScopedNamespaceDeclaration">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Add/remove blank line after file scoped namespace declaration</Description>
  </Option>
  <Option Id="TrailingCommaStyle">
    <Description>Include/omit trailing comma in initializer or enum</Description>
    <Values>
      <Value>include</Value>
      <Value>omit</Value>
      <Value>omit_when_single_line</Value>
    </Values>
  </Option>
  <Option Id="BlankLineBetweenSwitchSections">
    <Description>Include/omit blank line between switch sections</Description>
    <Values>
      <Value>include</Value>
      <Value>omit</Value>
      <Value>omit_after_block</Value>
    </Values>
  </Option>
  <Option Id="UseCollectionExpression">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Use collection expression for array/collection creation</Description>
  </Option>
  <Option Id="UseVar">
    <Description>Use 'var' instead of explicit type</Description>
    <Values>
      <Value>always</Value>
      <Value>never</Value>
      <Value>when_type_is_obvious</Value>
    </Values>
  </Option>
    <Option Id="NullConditionalOperator_AvoidNegativeBooleanComparison">
        <Key>null_conditional_operator.avoid_negative_boolean_comparison</Key>
        <DefaultValue>true</DefaultValue>
        <Description>Do not suggest to use null-conditional operator when result would be `... != true/false`</Description>
    </Option>
  <!--
  <Option Id="">
    <Key></Key>
    <DefaultValue></DefaultValue>
    <ValuePlaceholder></ValuePlaceholder>
    <Description></Description>
    <Values>
      <Value IsDefault="true"></Value>
      <Value></Value>
    </Values>
  </Option>
  -->
</Options>